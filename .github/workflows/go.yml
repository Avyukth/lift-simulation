name: Go CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.23"
  ENV: ci
  AWS_REGION: "us-east-2"

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./src
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Create CI .env file
        run: |
          echo "API_KEY=${{ secrets.API_KEY }}" > .env.ci
          echo "DB_PATH=:memory:" >> .env.ci
          echo "LOG_LEVEL=debug" >> .env.ci
          # Add other necessary environment variables

      - name: Tidy modules
        run: go mod tidy

      - name: Run tests
        run: GO_ENV=ci go test -v ./...

      - name: Build
        run: GO_ENV=ci go build -v ./...

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Install dependencies
        run: |
          cd src
          go mod tidy
          go mod download

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest
          working-directory: src
          args: --timeout=5m

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build, lint]
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./deployments/docker/dockerfile.lift-simulation
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ secrets.DOCKER_USERNAME }}/lift-simulation:${{ github.sha }}
          build-args: |
            ENV=ci
            BUILD_REF=${{ github.sha }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2
        env:
          EC2_IP: ${{ secrets.EC2_IP }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/lift-simulation:${{ github.sha }}
        run: |
          echo "Deploying to EC2..."
          ssh -i ${{ secrets.EC2_SSH_KEY }} ubuntu@$EC2_IP << EOF
            docker pull $DOCKER_IMAGE
            docker stop lift-simulation || true
            docker rm lift-simulation || true
            docker run -d --name lift-simulation -p 80:8080 $DOCKER_IMAGE
          EOF
