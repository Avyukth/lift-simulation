name: Go CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.23"
  AWS_REGION: "us-east-2"
  DOCKER_USERNAME: "avyukth"

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Generate CI environment file
        run: |
          chmod +x ./scripts/generate_env.sh
          ./scripts/generate_env.sh
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
          GO_ENV: ci

      - name: Run tests
        run: |
          cd src
          go test -v ./...

      - name: Build
        run: |
          cd src
          go build -v ./...

  docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set short SHA
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV

      - name: Generate CI environment file
        run: |
          chmod +x ./scripts/generate_env.sh
          ./scripts/generate_env.sh
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
          GO_ENV: ci

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./deployments/docker/dockerfile.lift-simulation
          push: true
          tags: ${{ env.DOCKER_USERNAME }}/lift-simulation:${{ env.SHORT_SHA }}
          build-args: |
            BUILD_REF=${{ env.SHORT_SHA }}
            BUILD_DATE=${{ github.event.repository.updated_at }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: docker
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set short SHA
        run: echo "SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-8)" >> $GITHUB_ENV

      - name: Generate production environment file
        run: |
          chmod +x ./scripts/generate_env.sh
          ./scripts/generate_env.sh
        env:
          ENV_FILE: ${{ secrets.ENV_FILE }}
          GO_ENV: production

      - name: Debug EC2_IP
        run: |
          echo "Raw EC2_IP: '${{ secrets.EC2_IP }}'"
          CLEANED_IP=$(echo '${{ secrets.EC2_IP }}' | tr -cd '[:print:]' | tr -d '[:space:]"')
          echo "Cleaned EC2_IP: '$CLEANED_IP'"
          if [[ ! $CLEANED_IP =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid IP address format"
            exit 1
          fi
          echo "CLEANED_IP=$CLEANED_IP" >> $GITHUB_ENV

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_PEM_KEY }}" | base64 -d > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem
          ssh-keyscan -H ${{ env.CLEANED_IP }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2
        run: |
          echo "Deploying to EC2 (Production Environment)..."
          echo "Using IP: ${{ env.CLEANED_IP }}"
          scp -v -i ~/.ssh/ec2_key.pem .env.generated ubuntu@${{ env.CLEANED_IP }}:/home/ubuntu/lift-simulation.env
          ssh -v -i ~/.ssh/ec2_key.pem ubuntu@${{ env.CLEANED_IP }} << EOF
            docker pull ${{ env.DOCKER_USERNAME }}/lift-simulation:${SHORT_SHA}
            docker stop lift-simulation || true
            docker rm lift-simulation || true
            docker run -d --name lift-simulation -p 80:8080 \
              --env-file /home/ubuntu/lift-simulation.env \
              ${{ env.DOCKER_USERNAME }}/lift-simulation:${SHORT_SHA}
          EOF

      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/ec2_key.pem
